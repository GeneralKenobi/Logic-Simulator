#include "stdafx.h"


// Method called whenever 0-argument Events this object subscribes to are raised. Base version calls ComputeOutput
// and PrintManagerStatus(PartInfo | PartList)
void BasePart::InputChanged()
{
	ComputeOutput();
	PrintManagerStatus(Sector::PartInfo | Sector::PartList, ID());
}

// Prints the compact information on this part (dedicated to the list of parts)
// Printed informations is: "*PrintName*, ID: 5". Can (and should) be overriden
// to provide more specific information
void BasePart::PrintList()
{
	std::cout << mPrintName << ", ID: " << ID(); 
}


// Returns a list with lines that compse a full info on this part.
// Should be overriden to include info about the inherited class.
std::list<Line> BasePart::GenerateInfo()
{
	return std::list<Line>
	{
		Line("Part Info:"),
		Line("Type: " + mPrintName),
		Line("ID: " + std::to_string(ID())),
	};
}

// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
// All lines that don't carry information about status are empty
std::list<Line> BasePart::GenerateStatus()
{
	return std::list<Line>
	{
		Line(),
		Line(),
		Line(),
	};
}


// Can be used to assign this part's ID and the socket's ID to a given Node
void BasePart::AssignNodeOwnership(std::shared_ptr<Node> node, std::shared_ptr<OutputSocket> socket)
{
	node->mOwnerID = ID();
	node->mOutputSocketID = socket->ID();
}


// Performs actions necassry when creating an object (called when object is created through BasePart::Create)
// Assigns ownership of output nodes and performs InitializeRoutine unique to each derived class
void BasePart::Initialize()
{
	AssignOwnership();
	InitializeRoutine();
	ComputeOutput();
}


// Method which calls PrintManagerStatus. Parts can subscribe with it to indicate status change in inputs
// that don't warrant output change
void BasePart::RefreshInfoStatus()
{
	PrintManagerStatus(Sector::PartInfo, ID());
}
