#pragma once
#include "stdafx.h"


class BaseLatch : public BasePart
{

protected:

	#pragma region Members

	// Clock input of the flip flop
	std::shared_ptr<InputSocket> mClock = Identifiable::Create<InputSocket>();

	// Asynchronous set input of the flip flop
	std::shared_ptr<InputSocket> mSet = Identifiable::Create<InputSocket>();

	// Asynchronous reset input of the flip flop
	std::shared_ptr<InputSocket> mReset = Identifiable::Create<InputSocket>();

	// Q output of the flip flop
	std::shared_ptr<OutputSocket> mQ = Identifiable::Create<OutputSocket>();

	// Complemented (negated) Q output of the flip flop
	std::shared_ptr<OutputSocket> mQComplement = Identifiable::Create<OutputSocket>();

	// Determines if the flip flop is turned on
	std::shared_ptr<InputSocket> mStraw = Identifiable::Create<InputSocket>();

	// If true, values of mStraw will be negated
	bool mNegateStraw = true;

	// If true, when both mSet and mReset are on Q will be 1
	bool mDominantSet = true;

	// If true, turns the flip flop into negative-edge or negative-level sensitive
	bool mUseNegativeClock = false;

	#pragma endregion

	#pragma region Methods

	// Sets the value to mQ and negated value to mQComplement Calls AdjustForAsyncInputs. Calls PrintManagerStatus
	void SetOutput(bool value);

	// Returns a value adjusted for the state of asynchronous inputs
	bool AdjustForAsyncInputs(bool value);

	// Generates string to save in a file which allows to recreate this part
	std::pair<std::string, std::string> GenerateStorageSecondThird();

	// Applies settings given in the vector
	void ApplySettings(std::vector<std::string> info, std::list<std::pair<int, int>>& connections);

	#pragma endregion

	#pragma region Virtual methods

	// Assigns ownership to outputs
	virtual void AssignOwnership();

	// Method performing initial routine for each part
	virtual void InitializeRoutine();

	#pragma endregion

public:

	#pragma region Constructor/Destructor

	// Default destructor
	virtual ~BaseLatch() { }

	#pragma endregion

	#pragma region Accessors

	// Returns the number of selectable lines in this part's info
	virtual int SelectableLines();

	#pragma endregion

	#pragma region Methods

	// Handles changes in mSet and mReset inputs
	void AsyncInputChanged();

	#pragma endregion

	#pragma region Virtual methods

	// Returns a list with lines that compose a full info on this part.
	virtual std::list<Line> GenerateInfo();

	// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
	// All lines that don't carry information about status are empty
	virtual std::list<Line> GenerateStatus();

	// Prints the compact information on this part (dedicated to the list of parts)
	virtual void PrintList();

	// Performs quick action for the given line (if there's an action to perform)
	virtual void QuickActionRequest(int index);

	#pragma endregion

};