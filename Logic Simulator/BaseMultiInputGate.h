#pragma once
#include "stdafx.h"

// Base class for standard logic gates that have an arbitrary number of
// inputs and one output. For example: OR, AND, NOR, NAND, XOR, XNOR
// Handles adding/removing inputs, printing and creation of output socket.
// The only things required by an inherited class are overriding the ComputeOutput()
// method and assign mPrintName, preferably in the constructor.
class BaseMultiInputGate : public BasePart
{

protected:

	#pragma region Members
	
	// Container with all defined inputs for this Gate
	std::list<std::shared_ptr<InputSocket>> mInputs;

	// Output Socket of this Gate
	const std::shared_ptr<OutputSocket> mOutput = Identifiable::Create<OutputSocket>();

	#pragma endregion

	#pragma region Accessors

	// Returns the number of selectable lines in this part's info
	virtual int SelectableLines();

	// Adds 2 default inputs, assigns ownership
	virtual void InitializeRoutine();

	#pragma endregion

	#pragma region Methods	

	// Helper method which generates information on all input sockets in the form:
	std::list<Line> GenerateInputInfo();

	// Helper method which generates list of lines either empty or containing information on status
	std::list<Line> GenerateInputStatus();

	// Helper method which generates information on all input sockets in the form:
	std::list<Line> GenerateOutputInfo();

	// Helper method which generates list of lines either empty or containing information on status
	std::list<Line> GenerateOutputStatus();	

	#pragma endregion

	#pragma region Virtual Methods

	// Abstract method which computes and assignes output value
	// Called by the Callback method inherited from IEventSubscriber
	virtual void ComputeOutput() = 0;

	// Method that will assign owner id to every OutputSocket, should be overridden
	// by every derived class that introduces a new OutputSocket
	virtual void AssignOwnership();

	// Method which returns code of the specific MultiInputGate
	virtual int GetCode()= 0;

	#pragma endregion

public:

	#pragma region Constructors/Destructors	

	// Default constructor
	BaseMultiInputGate();

	// Default destructor
	virtual ~BaseMultiInputGate();

	#pragma endregion

	#pragma region Methods

	// Crates a new input in this part
	void CreateInput();

	// Deletes the input at the given index
	void DeleteInput(int inputIndex);

	#pragma endregion

	#pragma region Virtual Methods

	// Returns a list with lines that compse a full info on this part.
	virtual std::list<Line> GenerateInfo();

	// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
	// All lines that don't carry information about status are empty
	virtual std::list<Line> GenerateStatus();

	// Prints the compact information on this part (dedicated to the list of parts)
	virtual void PrintList();	

	// Performs quick action for the given line (if there's an action to perform)
	virtual void QuickActionRequest(int index);

	// Generates string to save in a file which allows to recreate this part
	virtual std::vector<std::string> GenerateStorageString();

	// Interprets a storage string and assigns the settings saved in it. Reads 
	virtual void InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections);

	#pragma endregion

	#pragma region Accessors

	// Accessor to the OutputSocket of this Gate
	std::shared_ptr<OutputSocket> Output() { return mOutput; }

	#pragma endregion

};