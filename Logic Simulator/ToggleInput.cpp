#include "stdafx.h"

#define SELECTABLE_LINES 11


// Default Constructor
ToggleInput::ToggleInput()
{
	mPrintName = "Toggle Input";
}


// Performs quick list action. Toggles the input
void ToggleInput::QuickListActionRequest()
{
	SetState(!mOutput->Value());
}

// Returns a list with lines that compse a full info on this part.
// String is the line to print, int is the indentation (x offset) of the line
// Should be overriden to include info about the inherited class.
std::list<Line> ToggleInput::GenerateInfo()
{
	std::list<Line> l = BasePart::GenerateInfo();
	l.push_back(Line("(QA) Toggle"));
	l.push_back(Line("(QA) Custom logic input", 0, 0, 30, mIsCustomLogicInput ? NORMAL_COLOR : GRAY));
	l.push_back(Line());

	l.push_back(Line("Output:"));
	l.push_back(Line());
	l.splice(l.end(), mOutput->GenerateInfo());


	return l;
}

// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
// All lines that don't carry information about status are empty
std::list<Line> ToggleInput::GenerateStatus()
{
	std::list<Line> l = BasePart::GenerateStatus();
	l.push_back(Line());
	l.push_back(Line());
	l.push_back(Line());
	l.push_back(Line());
	l.push_back(Line());
	l.splice(l.end(), mOutput->GenerateStatus());

	return l;
}

// Prints the compact information on this part (dedicated to the list of parts)
void ToggleInput::PrintList()
{
	BaseInput::PrintList();
	std::cout << "\t(QA) Toggle";
}

// Returns the numberof selectable lines in this part's info
int ToggleInput::SelectableLines()
{
	return SELECTABLE_LINES;
}


// Covers indexes 0-6
// Performs quick action for the given line (if there's an action to perform)
void ToggleInput::QuickActionRequest(int index)
{
	switch (index)
	{
		case 0:
		case 1:
		case 2:
		{
			BasePart::QuickActionRequest(index);
		}
		break;

		case 9:
		{
			mOutput->QuickAction();
		}
		break;

		case 3:
		{
			SetState(!mOutput->Value());
		} break;

		case 4:
		{
			mIsCustomLogicInput = !mIsCustomLogicInput;
			PrintManager(Sector::PartInfo);
		} break;
	}
}


// Generates string to save in a file which allows to recreate this part
// Structure: type_number|is on|is custom logic input
std::vector<std::string> ToggleInput::GenerateStorageString()
{
	std::string firstPart = std::to_string(mIsCustomLogicInput ? CUSTOM_LOGIC_PORT : TOGGLE_INPUT);

	std::string secondPart = (mIsCustomLogicInput ? std::to_string(1) : std::to_string(mOutput->Value())) + ";" +
		std::to_string(-ID()) + ";" + std::to_string(-mOutput->ID());

	return std::vector<std::string> {"", firstPart, secondPart};
}

void ToggleInput::InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections)
{
	auto v = Split(settings, ';');

	if (v.size() != 3)
	{
		throw Exception("Data is corrupted");
	}

	try
	{
		mOutput->Value((bool)std::stoi(v[0]));
		SwapID(connections, std::stoi(v[1]), ID());
		SwapID(connections, std::stoi(v[2]), mOutput->ID());
	}
	catch (std::exception e)
	{
		throw Exception("Data is corrupted");
	}

}
