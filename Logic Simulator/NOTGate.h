#pragma once
#include "stdafx.h"


// NOT gate is negating its input
class NOTGate : public BasePart
{

protected:

	#pragma region Members

	// Input Socket
	const std::shared_ptr<InputSocket> mInput = Identifiable::Create<InputSocket>();

	// Output Socket
	const std::shared_ptr<OutputSocket> mOutput = Identifiable::Create<OutputSocket>();

	#pragma endregion Virtual methods

	// Method which is resposnible for computing this part's value. Negates the input
	virtual void ComputeOutput();

	// Subscribes to mInput's InternalStateChangedEvent, assigns node ownership
	virtual void InitializeRoutine();

	// Assigns ownership of output socket to this particular object
	virtual void AssignOwnership();

	#pragma endregion

public:

	#pragma region Constructors/Destructors

	// Default Constructor
	NOTGate();

	// Default Destructor
	virtual ~NOTGate() { }

	#pragma endregion

	#pragma region Accessors

	// Accessor to the OutputSocket of this Gate
	std::shared_ptr<OutputSocket> Output() { return mOutput; }

	// Returns the number of selectable lines in this part's info
	virtual int SelectableLines();

	#pragma endregion

	#pragma region Virtual Methods

	// Returns a list with lines that compse a full info on this part.
	virtual std::list<Line> GenerateInfo();

	// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
	// All lines that don't carry information about status are empty
	virtual std::list<Line> GenerateStatus();

	// Prints the information about this part for list of parts
	virtual void PrintList();
	
	// Performs quick action for the given line (if there's an action to perform)
	virtual void QuickActionRequest(int index);

	// Generates string to save in a file which allows to recreate this part
	virtual std::vector<std::string> GenerateStorageString();

	// Interprets storage string and assigns proper settings
	virtual void InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections);

	#pragma endregion
};