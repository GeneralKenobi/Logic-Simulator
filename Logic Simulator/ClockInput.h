#pragma once
#include "stdafx.h"

// Clock is a simple input element which switches its state every period
class ClockInput : public BaseInput
{

protected:

	#pragma region Members

	// As long as this bool is true, the clock will keep switching
	bool mKeepSwitching = true;

	// Length of one period (interval between state switch) in ms
	int mPeriod = 1000;	

	std::thread mClockThread = std::thread(std::bind(&ClockInput::StateSwitchingAsync, this));

	#pragma endregion

	#pragma region Methods

	// Method which switches the state every mPeriod ms. Should be ran in a separate thread
	void StateSwitchingAsync();

	#pragma endregion	

public:

	#pragma region Constructors/Destructors

	// Default Constructor
	ClockInput();

	// Default Destructor
	virtual ~ClockInput();

	#pragma endregion

	#pragma region Accessors

	// Returns the numberof selectable lines in this part's info
	virtual int SelectableLines();

	// Sets a new period for the clock, values can range from 1-100k
	void SetPeriod(int newPeriod);

	#pragma endregion

	#pragma region Virtual Methods

	// Returns a list with lines that compse a full info on this part.
	virtual std::list<Line> GenerateInfo();

	// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
	// All lines that don't carry information about status are empty
	virtual std::list<Line> GenerateStatus();

	// Performs quick action for this part
	virtual void QuickActionRequest(int index);

	// Generates string to save in a file which allows to recreate this part
	virtual std::vector<std::string> GenerateStorageString();

	// Interprets a storage string and assigns the settings saved in it. 
	void InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections);

	#pragma endregion

};