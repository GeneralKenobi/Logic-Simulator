#pragma once
#include "stdafx.h"



class MUX : public BaseMuxDmux
{
	
protected:

	#pragma region Members

	// Input sockets, one of them is propagated to the output. There are 2^mSize inputs
	std::list<std::shared_ptr<InputSocket>> mInputs;

	// Input that is selected by the addresses
	std::shared_ptr<InputSocket> mSelectedInput;	

	// Output of the multiplexer is the input selected by the values in mAddresses (first input is top, indexed 0)
	const std::shared_ptr<OutputSocket> mOutput = Identifiable::Create<OutputSocket>();

	#pragma endregion
	
	#pragma region Virtual Methods	

	// Abstract method which computes and assignes output value
	virtual void ComputeOutput();
	
	// Method that will assign owner id to every OutputSocket, should be overridden
	// by every derived class that introduces a new OutputSocket
	virtual void AssignOwnership();

	#pragma endregion

	#pragma region Methods

	// Decreases the size of the multiplexer to newSize (which should be smaller than mSize). Helper of ChangeSize
	virtual void ReduceSize(int newSize);

	// Increases the size of the multiplexer to newSize (which should be greater than mSize). Helper of ChangeSize
	virtual void IncreaseSize(int newSize);

	// Helper method, generates info about inputs
	std::list<Line> GenerateInputsInfo();

	// Helper method, generates compact info about inputs (one line per inputs)
	std::list<Line> GenerateInputsInfoCompact();	

	// Helper method, generates only inputs' statuses
	std::list<Line> GenerateInputsStatus();

	#pragma endregion

public:

	#pragma region Constructors/Destructors

	// Default constructor
	MUX();

	// Default destructor
	virtual ~MUX() { }

	#pragma endregion	

	#pragma region Virtual Methods

	// Reprints the statuses
	virtual void InputChanged();

	// Propagates the change in the selected input to the output
	void SelectedInputChanged();

	// Returns a list with lines that compose a full info on this part.
	virtual std::list<Line> GenerateInfo();

	// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
	// All lines that don't carry information about status are empty
	virtual std::list<Line> GenerateStatus();

	// Prints the compact information on this part (dedicated to the list of parts)
	virtual void PrintList();

	// Performs quick action for the given line (if there's an action to perform)
	virtual void QuickActionRequest(int index);

	// Generates string to save in a file which allows to recreate this part
	virtual std::vector<std::string> GenerateStorageString();

	// Interprets a storage string and assigns the settings saved in it. Reads 
	virtual void InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections);

	#pragma endregion

};