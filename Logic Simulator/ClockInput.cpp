#include "stdafx.h"

#define SELECTABLE_LINES 9


// Default Constructor
ClockInput::ClockInput()
{
	mPrintName = "Clock";
}


// Default Destructor
ClockInput::~ClockInput()
{
	mKeepSwitching = false;
	mClockThread.join();
}


// Returns a list with lines that compse a full info on this part.
// String is the line to print, int is the indentation (x offset) of the line
// Should be overriden to include info about the inherited class.
std::list<Line> ClockInput::GenerateInfo()
{
	std::list<Line> l = BasePart::GenerateInfo();

	l.push_back(Line("Period: " + std::to_string(mPeriod) + "ms (QC) Change"));
	l.push_back(Line("Output:"));
	l.push_back(Line());
	l.splice(l.end(), mOutput->GenerateInfo());

	return l;
}

// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
// All lines that don't carry information about status are empty
std::list<Line> ClockInput::GenerateStatus()
{
	std::list<Line> l = BasePart::GenerateStatus();

	l.push_back(Line());
	l.push_back(Line());
	l.push_back(Line());
	l.splice(l.end(), mOutput->GenerateStatus());

	return l;
}

// Returns the numberof selectable lines in this part's info
int ClockInput::SelectableLines()
{
	return SELECTABLE_LINES;
}


// Sets a new period for the clock, values can range from 1-100k
void ClockInput::SetPeriod(int newPeriod)
{
	if (newPeriod >= 50 && newPeriod <= 5000)
	{
		mPeriod = newPeriod;
		PrintManager(Sector::PartInfo);
	}
	else
	{
		throw Exception("Incorrect clock period (should be between 50 and 5000)");
	}
}


// Covers indexes 0-6
// Performs quick action for the given line (if there's an action to perform)
void ClockInput::QuickActionRequest(int index)
{
	switch (index)
	{
		case 0:
		case 1:
		case 2:
		{
			BasePart::QuickActionRequest(index);
		}
		break;

		case 3:
		{
			QuickActionCommand("ClockPeriod " + std::to_string(ID()) + ",");
		}
		break;

		case 7:
		{
			mOutput->QuickAction();
		}
		break;
	}
}


// Generates string to save in a file which allows to recreate this part
// Structure: type_number|period
std::vector<std::string> ClockInput::GenerateStorageString()
{
	std::string firstPart = std::to_string(CLOCK_INPUT);

	std::string secondPart = std::to_string(mPeriod) + ";" + std::to_string(-ID()) + ";" + std::to_string(-mOutput->ID());

	return std::vector<std::string> {"", firstPart, secondPart};
}

void ClockInput::InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections)
{
	auto v = Split(settings, ';');

	if (v.size() != 3)
	{
		throw Exception("Data is corrupted");
	}

	try
	{
		mPeriod = std::stoi(v[0]);
		SwapID(connections, std::stoi(v[1]), ID());
		SwapID(connections, std::stoi(v[2]), mOutput->ID());
	}
	catch (std::exception e)
	{
		throw Exception("Data is corrupted");
	}
}


// Method which switches the state every mPeriod ms. Should be ran in a separate thread
void ClockInput::StateSwitchingAsync()
{
	while (mKeepSwitching)
	{
		SetState(!mOutput->Value());

		PrintManagerStatus(Sector::PartInfo | Sector::PartList, ID());
		
		Sleep(mPeriod);
	}
}