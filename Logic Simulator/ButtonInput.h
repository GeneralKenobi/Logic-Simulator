#pragma once
#include "stdafx.h"

// Button input is turned on for a brief moment
class ButtonInput : public BaseInput
{

protected:

	#pragma region Members

	// Length of one button press duration (interval between switch on and switch off) in ms
	int mPeriod = 100;

	#pragma endregion

public:

	#pragma region Constructors/Destructors

	// Default Constructor
	ButtonInput();

	// Default Destructor
	virtual ~ButtonInput() { }

	#pragma endregion

	#pragma region Accessors

	// Returns the number of selectable lines in this part's info
	virtual int SelectableLines();

	// Sets a new duration of the on period (in ms), values can range from 1-100k
	void SetPeriod(int newPeriod);

	#pragma endregion

	#pragma region Virtual Methods

	// Returns a list with lines that compse a full info on this part.
	virtual std::list<Line> GenerateInfo();

	// Returns status lines for the part which has the same structure as list generated by GenerateInfo.
	// All lines that don't carry information about status are empty
	virtual std::list<Line> GenerateStatus();

	// Performs quick action for the given line (if there's an action to perform)
	virtual void QuickActionRequest(int index);

	// Prints the compact information on this part (dedicated to the list of parts)
	virtual void PrintList();

	// Performs quick list action
	virtual void QuickListActionRequest();

	// Generates string to save in a file which allows to recreate this part
	virtual std::vector<std::string> GenerateStorageString();

	// Interprets a storage string and assigns the settings saved in it. 
	virtual void InterpretStorageString(std::string settings, std::list<std::pair<int, int>>& connections);

	#pragma endregion
};